server {

    ###############################################################
    # MAKE DAMN SURE THE LUA CODE CACHE IS "ON" FOR PRODUCTION!!! #
    ###############################################################
    lua_code_cache "on";
    
    # nginx config
    listen   80;
    listen unix:/var/run/nginx.sock;
    server_name  localhost;
    access_log  /var/log/nginx/luasnake.access.log timed_combined;
    error_log  /var/log/nginx/luasnake.error.log debug;
    include /etc/nginx/conf.d/general_security.conf.inc;
    include /etc/nginx/conf.d/nginx_status.conf.inc;
    
    # New Relic Config
    set $transaction_id 1;
    access_by_lua_block {
        ngx.ctx.segment_stack = {}
        ngx.var.transaction_id = newrelic.begin_transaction()
    }
    log_by_lua_block {
        newrelic.end_transaction( tonumber( ngx.var.transaction_id ) )
    }
    
    # Routes
    location ~ ^/$ {
        default_type "application/json";
        content_by_lua_block {
            newrelic.set_transaction_name( tonumber( ngx.var.transaction_id ), "Index" )
            response = {
                color = "#717171",
                head = ngx.var.scheme .. "://" .. ngx.var.host .. "/static/head.png"
            }
            ngx.print( cjson.encode( response ) )
        }
    }
    location /static/ {
        root /var/luasnake;
        try_files $uri =404;
    }
    location /start {
        default_type "application/json";
        if ($request_method != POST ) { return 405; }
        content_by_lua_block {
            newrelic.set_transaction_name( tonumber( ngx.var.transaction_id ), "Start" )
            ngx.print( cjson.encode({ taunt = util.bieberQuote() }) )
        }
    }
    location /move {
        default_type "application/json";
        if ($request_method != POST ) { return 405; }
        content_by_lua_file "robosnake.lua";
    }
    location /parallel {
        default_type "application/json";
        if ($request_method != POST ) { return 405; }
        content_by_lua_file "parallel.lua";
    }
    location /end {
        default_type "application/json";
        if ($request_method != POST ) { return 405; }
        content_by_lua_block {
            newrelic.set_transaction_name( tonumber( ngx.var.transaction_id ), "End" )
            ngx.print( cjson.encode({ taunt = util.bieberQuote() }) )
        }
    }
}