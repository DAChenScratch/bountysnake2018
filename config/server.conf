  upstream backend {
    server unix:/var/run/nginx1.sock;
    server unix:/var/run/nginx2.sock;
    server unix:/var/run/nginx3.sock;
    server unix:/var/run/nginx4.sock;
    server unix:/var/run/nginx5.sock;
    server unix:/var/run/nginx6.sock;
    server unix:/var/run/nginx7.sock;
    server unix:/var/run/nginx8.sock;
  }
  server {
    listen 80;
    location / {
      proxy_set_header Host bountysnake2018.rdbrck.com;
      proxy_pass http://backend;
    }
  }
  server {

    ##########################################################
    # MAKE SURE THE LUA CODE CACHE IS "ON" FOR PRODUCTION!!! #
    ##########################################################
    lua_code_cache "on";
    
    # nginx config
    listen   unix:/var/run/nginx1.sock;
    listen   unix:/var/run/nginx2.sock;
    listen   unix:/var/run/nginx3.sock;
    listen   unix:/var/run/nginx4.sock;
    listen   unix:/var/run/nginx5.sock;
    listen   unix:/var/run/nginx6.sock;
    listen   unix:/var/run/nginx7.sock;
    listen   unix:/var/run/nginx8.sock;
    server_name  localhost;
    
    # Dev logging
    # access_log  /var/log/nginx/luasnake.access.log timed_combined;
    # error_log  /var/log/nginx/luasnake.error.log debug;
    
    # Prod - disable logging
    access_log /dev/null;
    error_log /dev/null crit;
    
    include /etc/nginx/conf.d/general_security.conf.inc;
    include /etc/nginx/conf.d/nginx_status.conf.inc;
    
    
    
    # Routes
    
    # Static. Just here to make our head URL work.
    location /static/ {
        root /var/luasnake;
        try_files $uri =404;
    }
    
    # Game start.
    location /start {
        default_type "application/json";
        if ( $request_method != POST ) { return 405; }
        content_by_lua_block {
            ngx.log( ngx.DEBUG, 'Got request data: ' .. ngx.var.request_body )
            response = {
                color = "#5DD284",
                secondary_color = "#FF0000",
                head_url = ngx.var.scheme .. "://" .. ngx.var.host .. "/static/robosnake-crop.jpg",
                name = "Son of Robosnake",
                taunt = util.taunt(),
                head_type = "bendr",
                tail_type = "fat-rattle"
            }
            ngx.print( cjson.encode( response ) )
            ngx.eof()
            collectgarbage()
            collectgarbage()
        }
    }
    
    # Move. Different behavior here depending on the API version.
    location /move {
        default_type "application/json";
        if ( $request_method != POST ) { return 405; }
        content_by_lua_file "robosnake.lua";
    }
    
    # Game end.
    location /end {
        default_type "application/json";
        if ( $request_method != POST ) { return 405; }
        content_by_lua_block {
            ngx.log( ngx.DEBUG, 'Got request data: ' .. ngx.var.request_body )
            ngx.eof()
            collectgarbage()
            collectgarbage()
        }
    }

  }
